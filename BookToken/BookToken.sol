
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract BookToken {
    // Токен-книга
    struct Book {
        string title; // Название книги
        string author; // Автор книги
        uint pages; // Количество страниц в книге
        uint price; // Опциональный параметр, цена книги
    }

    // Библиотека, где каждый владеет своей полкой — массивом книг
    mapping (uint256 => Book[]) public lib;

    // Модификатор, проверяющий уникальность названия книги
    modifier uniqueTitle(string title) {
        optional (uint256, Book[]) shelf = lib.min(); // Начиная с первой полки
        
        // for получался слишком громоздким, заменил на while
        while (shelf.hasValue()) { // Пока полки не закончились
            (uint256 owner, Book[] books) = shelf.get();
            for (uint book = 0; book < books.length; book++) {
                require(title != books[book].title, // Название должно быть уникальным
                    99, // Не знаю, какой код подходит в данном случае, использую не занятый
                    "Эта книга уже есть в библиотеке!");
            }
            shelf = lib.next(owner); // Если книга ещё не нашлась, проверить следующую полку
        }

        _;
    }

    // Добавляет книгу в библиотеку
    function addBook (string title, string author, uint pages) public uniqueTitle (title) {
        Book book = Book(title, author, pages, 0); // Цена книги изначально не задана и инициализируется нулём
        uint256 sender = msg.pubkey(); // Публичный ключ служит идентификатором владельца
        tvm.accept();

        if (lib.exists(sender)) { // Если отправитель уже имеет полку
            lib[sender].push(book);
        } else { // Если книга у отправителя первая
            lib[sender] = [book];
        }
    }

    // Задать цену книги перед продажей
    function setPrice (string title, uint price) public { 
        require(lib.exists(msg.pubkey()), 97, "У отправителя нет книг!");
                
        uint b = 0;
        for(; b < lib[msg.pubkey()].length; b++) {
            // Если такая книга у отправителя есть
            if (lib[msg.pubkey()][b].title == title) {
                tvm.accept();
                lib[msg.pubkey()][b].price = price; // Цена меняется
                break; // Поиски книги прекращаются
            }
        }
        // Если книгу не нашли (цикл прервался полным перебором)
        require(b < lib[msg.pubkey()].length, 98, "У отправителя нет такой книги!");
    }
}
