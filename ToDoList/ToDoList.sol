
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

struct ToDoItem {
    string itemName;
    uint32 timestamp;
    bool completed;
}

// Список задач
contract ToDoList {
    // Список задач
    // Публичный — функция для его получения будет создана автоматически
    mapping (int8=>ToDoItem) public list;
    int8 length = 0;

    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

     // Modifier that allows to accept some external messages
	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    // Добавляет задачу в конец списка, у
    function addTask (string taskName) public checkOwnerAndAccept {
        list[length].itemName = taskName;
        list[length].timestamp = now;
        list[length].completed = false;
        length++;
    }

    // Возвращает количество открытых (незавершённых) задач
    function countOpenTasks () public view returns (int8) {
        int8 open = 0;
        for (int8 i = 0; i < length; i++) { // Для каждой задачи в списке
            if (!list[i].completed) // Если задача не выполнена
                open++; // посчитать
        }
        return open;
    }

    // Возвращает задачу по ключу
    function getTask (int8 key) public view returns (ToDoItem) {
        return list[key];
    }

    // Удаляет задачу по ключу
    function deleteTask (int8 key) public checkOwnerAndAccept {
        if (0 <= key && key < length) { // Если ключ присутствует в списке
            list[key] = list[length - 1]; // Заменить удаляемый элемент последним в списке
            delete list[length - 1]; // Удалить последний элемент
            length--; // Уменьшить список на 1 элемент
        }
    }
    
    // Отмечает задачу завершённой
    function completeTask (int8 key) public checkOwnerAndAccept {
        list[key].completed = true;
    }
}
